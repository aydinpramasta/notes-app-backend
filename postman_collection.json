{
	"info": {
		"_postman_id": "2f24e036-1ebb-46c1-b4f2-e6bcb05d8bb5",
		"name": "Notes App Backend",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Add Note",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response status code should have 201 value', () => {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test('response Content-Type header should have application/json value', () => {",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');",
							"});",
							"",
							"pm.test('response body should be an object', () => {",
							"    pm.expect(pm.response.json()).to.be.an('object');",
							"});",
							"",
							"pm.test('response body should have the correct property and value', () => {",
							"    const responseJson = pm.response.json();",
							"",
							"    pm.expect(responseJson).to.ownProperty('status');",
							"    pm.expect(responseJson.status).to.equals('success');",
							"",
							"    pm.expect(responseJson).to.ownProperty('message');",
							"    pm.expect(responseJson.message).to.equals('Catatan berhasil ditambahkan');",
							"",
							"    pm.expect(responseJson).to.ownProperty('data');",
							"    pm.expect(responseJson.data).to.be.an('object');",
							"});",
							"",
							"pm.test('response body data should have noteId property and not equal to empty', () => {",
							"    const { data } = pm.response.json();",
							"",
							"    pm.expect(data).to.ownProperty('noteId');",
							"    pm.expect(data.noteId).to.not.equals('');",
							"",
							"    pm.environment.set('noteId', data.noteId);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"title\": \"Catatan A\",\n    \"tags\": [\"Android\", \"Web\"],\n    \"body\": \"Isi dari catatan A\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8080/notes",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"notes"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All Notes",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response status code should have 200 value', () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test('response Content-Type header should have application/json value', () => {",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');",
							"});",
							"",
							"pm.test('response body should be an object', () => {",
							"    pm.expect(pm.response.json()).to.be.an('object');",
							"});",
							"",
							"pm.test('response body should have the correct property and value', () => {",
							"    const responseJson = pm.response.json();",
							"",
							"    pm.expect(responseJson).to.ownProperty('status');",
							"    pm.expect(responseJson.status).to.equals('success');",
							"",
							"    pm.expect(responseJson).to.ownProperty('data');",
							"    pm.expect(responseJson.data).to.be.an('object');",
							"});",
							"",
							"pm.test('response body data should contain at least 1 item', () => {",
							"    const { data } = pm.response.json();",
							"",
							"    pm.expect(data).to.have.ownProperty('notes');",
							"    pm.expect(data.notes).length.at.least(1);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:8080/notes",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"notes"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Specific Note",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response status code should have 200 value', () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test('response Content-Type header should have application/json value', () => {",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');",
							"});",
							"",
							"pm.test('response body should be an object', () => {",
							"    pm.expect(pm.response.json()).to.be.an('object');",
							"});",
							"",
							"pm.test('response body should have the correct property and value', () => {",
							"    const responseJson = pm.response.json();",
							"",
							"    pm.expect(responseJson).to.ownProperty('status');",
							"    pm.expect(responseJson.status).to.equals('success');",
							"",
							"    pm.expect(responseJson).to.ownProperty('data');",
							"    pm.expect(responseJson.data).to.be.an('object');",
							"});",
							"",
							"pm.test('response body data should contain note object', () => {",
							"    const { data } = pm.response.json();",
							"",
							"    pm.expect(data).to.ownProperty('note');",
							"    pm.expect(data.note).to.be.an('object');",
							"});",
							"",
							"pm.test('note object should contain correct value for id, title, body, and tags property', () => {",
							"    const { note } = pm.response.json().data;",
							"",
							"    const expectedId = pm.environment.get('noteId');",
							"    const expectedTitle = 'Catatan A';",
							"    const expectedTags = ['Android', 'Web'];",
							"    const expectedBody = 'Isi dari catatan A';",
							"",
							"    pm.expect(note).to.have.ownProperty('id');",
							"    pm.expect(note.id).to.equals(expectedId);",
							"    ",
							"    pm.expect(note).to.have.ownProperty('title');",
							"    pm.expect(note.title).to.equals(expectedTitle);",
							"",
							"    pm.expect(note).to.have.ownProperty('tags');",
							"    pm.expect(note.tags).to.eqls(expectedTags);",
							"",
							"    pm.expect(note).to.have.ownProperty('body');",
							"    pm.expect(note.body).to.equals(expectedBody);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:8080/notes/{{noteId}}",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"notes",
						"{{noteId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Note",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response status code should have 200 value', () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test('response Content-Type header should have application/json value', () => {",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');",
							"});",
							"",
							"pm.test('response body should be an object', () => {",
							"    pm.expect(pm.response.json()).to.be.an('object');",
							"});",
							"",
							"pm.test('response body should have the correct property and value', () => {",
							"    const responseJson = pm.response.json();",
							"",
							"    pm.expect(responseJson).to.ownProperty('status');",
							"    pm.expect(responseJson.status).to.equals('success');",
							"",
							"    pm.expect(responseJson).to.ownProperty('message');",
							"    pm.expect(responseJson.message).to.equals('Catatan berhasil diperbarui');",
							"});",
							"",
							"pm.test('when request the updated note', () => {",
							"    const noteId = pm.environment.get('noteId');",
							"",
							"    pm.sendRequest(`http://localhost:8080/notes/${noteId}`, (error, response) => {",
							"        if (!error) {",
							"            pm.test('then the updated note should contain the latest data', () => {",
							"                const { note } = response.json().data;",
							"",
							"                const expectedTitle = 'Catatan A Revised';",
							"                const expectedTags = ['Android', 'Web'];",
							"                const expectedBody = 'Isi dari Catatan A Revised';",
							"",
							"                pm.expect(note).to.have.ownProperty('title');",
							"                pm.expect(note.title).to.equals(expectedTitle);",
							"",
							"                pm.expect(note).to.have.ownProperty('tags');",
							"                pm.expect(note.tags).to.eqls(expectedTags);",
							"",
							"                pm.expect(note).to.have.ownProperty('body');",
							"                pm.expect(note.body).to.equals(expectedBody);",
							"            });",
							"        }",
							"    });",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"title\": \"Catatan A Revised\",\n    \"tags\": [\"Android\", \"Web\"],\n    \"body\": \"Isi dari Catatan A Revised\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8080/notes/{{noteId}}",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"notes",
						"{{noteId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Note",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response status code should have 200 value', () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test('response Content-Type header should have application/json value', () => {",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');",
							"});",
							"",
							"pm.test('response body should be an object', () => {",
							"    pm.expect(pm.response.json()).to.be.an('object');",
							"});",
							"",
							"pm.test('response body should have the correct property and value', () => {",
							"    const responseJson = pm.response.json();",
							"",
							"    pm.expect(responseJson).to.ownProperty('status');",
							"    pm.expect(responseJson.status).to.equals('success');",
							"",
							"    pm.expect(responseJson).to.ownProperty('message');",
							"    pm.expect(responseJson.message).to.equals('Catatan berhasil dihapus');",
							"});",
							"",
							"pm.test('when request the deleted note', () => {",
							"    const noteId = pm.environment.get('noteId');",
							"",
							"    pm.sendRequest(`http://localhost:8080/notes/${noteId}`, (error, response) => {",
							"        if (!error) {",
							"            pm.expect(response.code).to.equals(404);",
							"",
							"            const responseJson = response.json();",
							"",
							"            pm.expect(responseJson.status).to.equals('fail');",
							"            pm.expect(responseJson.message).to.equals('Catatan tidak ditemukan');",
							"        }",
							"    });",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "localhost:8080/notes/{{noteId}}",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"notes",
						"{{noteId}}"
					]
				}
			},
			"response": []
		}
	]
}